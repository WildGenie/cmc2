<?xml version="1.0"?>
<doc>
<assembly>
<name>
ADMgmt
</name>
</assembly>
<members>
<member name="M:ADmgmt.AddDomainInfo.OK_Button_Click(System.Object,System.EventArgs)">
	<summary>
 Validates and adds custom domain information.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Peter Forman 09/08/2008</remarks>
</member><member name="M:ADmgmt.AddDomainInfo.txtDC_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Read Domain Controller value and add to aDSPath
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:ADmgmt.AddDomainInfo.txtDNS_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Read DNS Domain name and convert to aDSPath
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:ADmgmt.AddDomainInfo.ValidateInformation">
	<summary>
 Checks that mandatory domain fields are completed.
 </summary>
	<returns>true/false</returns>
	<remarks>username and password not validated.</remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.Found(System.String)">
	<summary>
 Returns boolean value indicating whether the requested domain name
 has a custom registry entry.
 </summary>
	<param name="NT_Domain"></param>
	<value></value>
	<returns>True/False</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.RegKeyName(System.String)">
	<summary>
 Returns the registry key name containing the information
 for the selected domain.
 </summary>
	<param name="NT_Domain"></param>
	<value></value>
	<returns>Registry Key Name</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.NTDomainName">
	<summary>
 The NT (Short) domain name
 </summary>
	<returns>Short domain name in upper case</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.DNSDomainName">
	<summary>
 The dns name of the domain.
 </summary>
	<returns>Lower case dns domain name</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.DomainController">
	<summary>
 The preferred domain controller used for querying AD.
 </summary>
	<value></value>
	<returns>Upper case domain controller name</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.Username">
	<summary>
 Optional username to use when querying AD. Returns Nothing if empty
 </summary>
	<value></value>
	<returns>Decrypted username as string, or Nothing if empty</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.Password">
	<summary>
 Optional password to use when querying AD. Returns Nothing if empty
 </summary>
	<value></value>
	<returns>Decrypted password as string, or Nothing if empty</returns>
	<remarks></remarks>
</member><member name="P:ADmgmt.CustomDomainInfo.DSPath">
	<summary>
 Returns DSPath (LDAP://{DC}/my.domain.com) for the selected domain.
 </summary>
	<value></value>
	<returns>aDSPath as string</returns>
	<remarks>Includes DC in string if available</remarks>
</member><member name="M:ADmgmt.CustomDomainInfo.FindCustomDomainInfo(System.String)">
	<summary>
 Checks for custom domain entry in registry, returns true if found
 </summary>
	<param name="Domain"></param>
	<returns>Populates internal properties</returns>
	<remarks></remarks>
</member><member name="M:ADmgmt.CustomDomainInfo.SaveCustomDomainInfo(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Saves custom domain information to the registry in first available space.
 </summary>
	<param name="Domain"></param>
	<remarks></remarks>
</member><member name="T:ADmgmt.CustomDomainInfo">
	<summary>
 Stores and retrieves custom domain strings.
 Strings contain: NT Domain Name, DNS Domain Name, Preferred domain controller,
                  Optional Username and Password.
 </summary>
	<remarks>Peter Forman 09/08/2008</remarks>
</member><member name="M:ADmgmt.AD.GetDirectoryEntry(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
	<summary>
 Method used to create an entry to the AD.
 Replace the path, username, and password.
 </summary>
	<param name="aDSPath"></param>
	<param name="DomainUser"></param>
	<param name="Password"></param>
	<param name="authenticationType"></param>
	<returns>DirectoryEntry</returns>
	<remarks>DomainUser should be in the form: DOMAIN\Username (or NOTHING)</remarks>
</member><member name="M:ADmgmt.AD.FriendlyDomainToLdapDomain(System.String)">
	<summary>
 Converts Netbios domain name to dns domain name.
 </summary>
	<param name="friendlyDomainName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ADmgmt.AD.EnumerateDomains">
	<summary>
 Returns an ArrayList containg all domains within the current forest.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ADmgmt.AD.EnumerateDomainControllers">
	<summary>
 Returns an ArrayList containing all domain controllers within the current domain.
 </summary>
	<returns>ArrayList</returns>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.SearchUser">
	<summary>
 Return list of users from ANR user query.
 </summary>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.SearchGroup">
	<summary>
 Return list of groups from ANR group query.
 </summary>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.GetUserDetails(System.String)">
	<summary>
 Fill form with selected users attributes.
 </summary>
	<param name="sAccountName"></param>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.UpdateUserAccountProperties(System.String)">
	<summary>
 Method that updates user's properties
 </summary>
	<param name="userLogin">sAMAccountName of the user to update</param>
</member><member name="M:ADmgmt.ADmgmt.UpdateUserTSProperties(System.String)">
	<summary>
 Commit changes to terminal services profile.
 </summary>
	<param name="userLogin"></param>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.GetProperty(System.DirectoryServices.SearchResult,System.String)">
	<summary>
 Return property value from a search result.
 </summary>
	<param name="SR"></param>
	<param name="PropertyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.AccExpires(System.DirectoryServices.SearchResult,System.String)">
	<summary>
 Return formatted value for account expired field.
 Either a date string or Never.
 </summary>
	<param name="SR"></param>
	<param name="PropertyName"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.SetADProperty(System.DirectoryServices.DirectoryEntry,System.String,System.String)">
	<summary>
 Helper method that sets properties for AD users.
 </summary>
	<param name="entry">DirectoryEntry to use</param>
	<param name="pName">Property name to set</param>
	<param name="pValue">Value of property to set</param>
</member><member name="M:ADmgmt.ADmgmt.GetDirectoryEntry(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)">
	<summary>
 Method used to create an AD entry.
 Replace the path, username, and password.
 </summary>
	<param name="aDSPath"></param>
	<param name="DomainUser"></param>
	<param name="Password"></param>
	<param name="authenticationType"></param>
	<returns>DirectoryEntry</returns>
	<remarks>DomainUser should be in the form: DOMAIN\Username (or NOTHING)</remarks>
</member><member name="M:ADmgmt.ADmgmt.SetUserPassword(System.String,System.String)">
	<summary>
 Reset a user's password
 </summary>
	<param name="User">User Logon Name</param>
	<param name="NewPassword">New Password for the user</param>
</member><member name="M:ADmgmt.ADmgmt.AddUserToGroup(System.DirectoryServices.DirectoryEntry,System.DirectoryServices.DirectoryEntry,System.String)">
	<summary>
 Method to add a user to a group
 </summary>
	<param name="entry">DirectoryEntry to use</param>
	<param name="deUser">User DirectoryEntry to use</param>
	<param name="GroupName">Group Name to add user to</param>
</member><member name="M:ADmgmt.ADmgmt.GetGroups(System.String)">
	<summary>
 Function to return all the groups the user is a member od
 </summary>
	<param name="LogonName">Users logon name</param>
</member><member name="M:ADmgmt.ADmgmt.IsAccountActive(System.Int32)">
	<summary>
 This will perfrom a logical operation on the userAccountControl values
 to see if the user account is enabled or disabled.
 The flag for determining if the
 account is active is a bitwise value (decimal =2)
 </summary>
	<param name="userAccountControl"></param>
	<returns></returns>
</member><member name="M:ADmgmt.ADmgmt.RemoveUserFromGroup(System.String,System.String)">
	<summary>
 This will perform the removal of a user from the specified group
 </summary>
	<param name="UserName">Username of the user to remove</param>
	<param name="GroupName">Groupname to remove them from</param>
	<remarks></remarks>
</member><member name="M:ADmgmt.ADmgmt.AccountDisable(System.String,System.Boolean)">
	<summary>
 Method that enables/disables a user account in the AD 
 and hides user's email from Exchange address lists.
 </summary>
	<param name="userLogin">Login of the user to disable</param>
</member><member name="M:ADmgmt.ADmgmt.GenerateMailBox(System.String)">
	<summary>
 Method that calls and starts a WSHControl.vbs
 </summary>
	<param name="userAlias"></param>
</member><member name="M:ADmgmt.ADmgmt.IsEmail(System.String)">
	<summary>
 Method that validates if a string has an email pattern.
 </summary>
	<param name="mail"></param>
	<returns></returns>
</member><member name="M:ADmgmt.ADmgmt.ToADDateString(System.DateTime)">
	<summary>
 Method that formats a date in the required format
 needed (AAAAMMDDMMSSSS.0Z) to compare dates in AD.
 </summary>
	<param name="date_Renamed"></param>
	<returns>Date in valid format for AD</returns>
</member><member name="P:ADmgmt.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ADmgmt.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ADmgmt.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>